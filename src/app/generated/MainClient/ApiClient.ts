/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class ClientApi {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createAuthor(body: CreateNewAuthorModel | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Author/CreateAuthor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateAuthor(_response);
        });
    }

    protected processCreateAuthor(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    editAuthor(body: AuthorDTO | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Author/EditAuthor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEditAuthor(_response);
        });
    }

    protected processEditAuthor(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteAuthor(authorId: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Author/DeleteAuthor/{authorId}";
        if (authorId === undefined || authorId === null)
            throw new Error("The parameter 'authorId' must be defined.");
        url_ = url_.replace("{authorId}", encodeURIComponent("" + authorId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteAuthor(_response);
        });
    }

    protected processDeleteAuthor(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllAuthors(  cancelToken?: CancelToken | undefined): Promise<AuthorDTO> {
        let url_ = this.baseUrl + "/api/Author/GetAllAuthors";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAllAuthors(_response);
        });
    }

    protected processGetAllAuthors(response: AxiosResponse): Promise<AuthorDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AuthorDTO.fromJS(resultData200);
            return Promise.resolve<AuthorDTO>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthorDTO>(<any>null);
    }

    /**
     * @param partOFName (optional) 
     * @return Success
     */
    getAllAuthorsByPartOfName(partOFName: string | undefined , cancelToken?: CancelToken | undefined): Promise<AuthorNamesAndIdInfo[]> {
        let url_ = this.baseUrl + "/api/Author/GetAllAuthorsByPartOfName?";
        if (partOFName === null)
            throw new Error("The parameter 'partOFName' cannot be null.");
        else if (partOFName !== undefined)
            url_ += "partOFName=" + encodeURIComponent("" + partOFName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAllAuthorsByPartOfName(_response);
        });
    }

    protected processGetAllAuthorsByPartOfName(response: AxiosResponse): Promise<AuthorNamesAndIdInfo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AuthorNamesAndIdInfo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<AuthorNamesAndIdInfo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthorNamesAndIdInfo[]>(<any>null);
    }

    /**
     * @return Success
     */
    getAllAuthorsNameAndId(  cancelToken?: CancelToken | undefined): Promise<AuthorNamesAndIdInfo[]> {
        let url_ = this.baseUrl + "/api/Author/GetAllAuthorsNameAndId";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAllAuthorsNameAndId(_response);
        });
    }

    protected processGetAllAuthorsNameAndId(response: AxiosResponse): Promise<AuthorNamesAndIdInfo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AuthorNamesAndIdInfo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<AuthorNamesAndIdInfo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthorNamesAndIdInfo[]>(<any>null);
    }

    /**
     * @return Success
     */
    getAuthorById(authorId: number , cancelToken?: CancelToken | undefined): Promise<AuthorDTO> {
        let url_ = this.baseUrl + "/api/Author/GetAuthorById/{authorId}";
        if (authorId === undefined || authorId === null)
            throw new Error("The parameter 'authorId' must be defined.");
        url_ = url_.replace("{authorId}", encodeURIComponent("" + authorId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAuthorById(_response);
        });
    }

    protected processGetAuthorById(response: AxiosResponse): Promise<AuthorDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AuthorDTO.fromJS(resultData200);
            return Promise.resolve<AuthorDTO>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthorDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    bookPOST(body: CreateNewBookModel | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Book";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBookPOST(_response);
        });
    }

    protected processBookPOST(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    bookDELETE(bookId: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Book/{bookId}";
        if (bookId === undefined || bookId === null)
            throw new Error("The parameter 'bookId' must be defined.");
        url_ = url_.replace("{bookId}", encodeURIComponent("" + bookId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBookDELETE(_response);
        });
    }

    protected processBookDELETE(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    bookGET(bookId: number , cancelToken?: CancelToken | undefined): Promise<BookDTO> {
        let url_ = this.baseUrl + "/api/Book/{bookId}";
        if (bookId === undefined || bookId === null)
            throw new Error("The parameter 'bookId' must be defined.");
        url_ = url_.replace("{bookId}", encodeURIComponent("" + bookId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBookGET(_response);
        });
    }

    protected processBookGET(response: AxiosResponse): Promise<BookDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BookDTO.fromJS(resultData200);
            return Promise.resolve<BookDTO>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BookDTO>(<any>null);
    }

    /**
     * @return Success
     */
    download(bookId: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Book/{bookId}/download";
        if (bookId === undefined || bookId === null)
            throw new Error("The parameter 'bookId' must be defined.");
        url_ = url_.replace("{bookId}", encodeURIComponent("" + bookId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownload(_response);
        });
    }

    protected processDownload(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    minmaxPrice(  cancelToken?: CancelToken | undefined): Promise<GetMaxAndMinPriceInfo> {
        let url_ = this.baseUrl + "/api/Book/minmax-price";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMinmaxPrice(_response);
        });
    }

    protected processMinmaxPrice(response: AxiosResponse): Promise<GetMaxAndMinPriceInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetMaxAndMinPriceInfo.fromJS(resultData200);
            return Promise.resolve<GetMaxAndMinPriceInfo>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetMaxAndMinPriceInfo>(<any>null);
    }

    /**
     * @return Success
     */
    filterByAuthor(authorId: number , cancelToken?: CancelToken | undefined): Promise<BooksForAuthorFilter[]> {
        let url_ = this.baseUrl + "/api/Book/filterByAuthor/{authorId}";
        if (authorId === undefined || authorId === null)
            throw new Error("The parameter 'authorId' must be defined.");
        url_ = url_.replace("{authorId}", encodeURIComponent("" + authorId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFilterByAuthor(_response);
        });
    }

    protected processFilterByAuthor(response: AxiosResponse): Promise<BooksForAuthorFilter[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BooksForAuthorFilter.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BooksForAuthorFilter[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooksForAuthorFilter[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    filterByGenres(body: number[] | undefined , cancelToken?: CancelToken | undefined): Promise<BooksByGenreFiltr[]> {
        let url_ = this.baseUrl + "/api/Book/filterByGenres";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFilterByGenres(_response);
        });
    }

    protected processFilterByGenres(response: AxiosResponse): Promise<BooksByGenreFiltr[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BooksByGenreFiltr.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BooksByGenreFiltr[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooksByGenreFiltr[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    filter(body: FilterForBookModel | undefined , cancelToken?: CancelToken | undefined): Promise<BooksAfterFilterModel[]> {
        let url_ = this.baseUrl + "/api/Book/filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFilter(_response);
        });
    }

    protected processFilter(response: AxiosResponse): Promise<BooksAfterFilterModel[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BooksAfterFilterModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BooksAfterFilterModel[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BooksAfterFilterModel[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addImageToBook(body: AddImageModel | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/BookImage/AddImageToBook";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddImageToBook(_response);
        });
    }

    protected processAddImageToBook(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteImage(imageId: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/BookImage/DeleteImage/{imageId}";
        if (imageId === undefined || imageId === null)
            throw new Error("The parameter 'imageId' must be defined.");
        url_ = url_.replace("{imageId}", encodeURIComponent("" + imageId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteImage(_response);
        });
    }

    protected processDeleteImage(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createGenre(body: CreateNewGenreOfBookModel | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GenreOfBook/CreateGenre";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateGenre(_response);
        });
    }

    protected processCreateGenre(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    editGenre(body: GenreOfBookDTO | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GenreOfBook/EditGenre";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEditGenre(_response);
        });
    }

    protected processEditGenre(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteGenre(genreId: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GenreOfBook/DeleteGenre/{genreId}";
        if (genreId === undefined || genreId === null)
            throw new Error("The parameter 'genreId' must be defined.");
        url_ = url_.replace("{genreId}", encodeURIComponent("" + genreId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteGenre(_response);
        });
    }

    protected processDeleteGenre(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllGenres(  cancelToken?: CancelToken | undefined): Promise<GetAllGenreModel> {
        let url_ = this.baseUrl + "/api/GenreOfBook/GetAllGenres";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAllGenres(_response);
        });
    }

    protected processGetAllGenres(response: AxiosResponse): Promise<GetAllGenreModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetAllGenreModel.fromJS(resultData200);
            return Promise.resolve<GetAllGenreModel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetAllGenreModel>(<any>null);
    }

    /**
     * @return Success
     */
    getGenreOfBookById(genreId: number , cancelToken?: CancelToken | undefined): Promise<AuthorDTO> {
        let url_ = this.baseUrl + "/api/GenreOfBook/GetGenreOfBookById/{genreId}";
        if (genreId === undefined || genreId === null)
            throw new Error("The parameter 'genreId' must be defined.");
        url_ = url_.replace("{genreId}", encodeURIComponent("" + genreId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetGenreOfBookById(_response);
        });
    }

    protected processGetGenreOfBookById(response: AxiosResponse): Promise<AuthorDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AuthorDTO.fromJS(resultData200);
            return Promise.resolve<AuthorDTO>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthorDTO>(<any>null);
    }

    /**
     * @return Success
     */
    getAllGenresByPartOfName(partOfName: string , cancelToken?: CancelToken | undefined): Promise<GenreOfBookNamesAndIdInfo> {
        let url_ = this.baseUrl + "/api/GenreOfBook/GetAllGenresByPartOfName/{partOfName}";
        if (partOfName === undefined || partOfName === null)
            throw new Error("The parameter 'partOfName' must be defined.");
        url_ = url_.replace("{partOfName}", encodeURIComponent("" + partOfName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAllGenresByPartOfName(_response);
        });
    }

    protected processGetAllGenresByPartOfName(response: AxiosResponse): Promise<GenreOfBookNamesAndIdInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GenreOfBookNamesAndIdInfo.fromJS(resultData200);
            return Promise.resolve<GenreOfBookNamesAndIdInfo>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GenreOfBookNamesAndIdInfo>(<any>null);
    }
}

export class AddImageModel implements IAddImageModel {
    images?: string[] | undefined;
    bookId?: number;

    constructor(data?: IAddImageModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
            this.bookId = _data["bookId"];
        }
    }

    static fromJS(data: any): AddImageModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddImageModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        data["bookId"] = this.bookId;
        return data;
    }
}

export interface IAddImageModel {
    images?: string[] | undefined;
    bookId?: number;
}

export class Author implements IAuthor {
    id?: number;
    firstName?: string | undefined;
    secondName?: string | undefined;
    dateOfBirth?: Date;
    biografy?: string | undefined;
    nationality?: string | undefined;
    books?: Book[] | undefined;

    constructor(data?: IAuthor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.secondName = _data["secondName"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.biografy = _data["biografy"];
            this.nationality = _data["nationality"];
            if (Array.isArray(_data["books"])) {
                this.books = [] as any;
                for (let item of _data["books"])
                    this.books!.push(Book.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Author {
        data = typeof data === 'object' ? data : {};
        let result = new Author();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["secondName"] = this.secondName;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["biografy"] = this.biografy;
        data["nationality"] = this.nationality;
        if (Array.isArray(this.books)) {
            data["books"] = [];
            for (let item of this.books)
                data["books"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAuthor {
    id?: number;
    firstName?: string | undefined;
    secondName?: string | undefined;
    dateOfBirth?: Date;
    biografy?: string | undefined;
    nationality?: string | undefined;
    books?: Book[] | undefined;
}

export class AuthorDTO implements IAuthorDTO {
    id?: number;
    firstName?: string | undefined;
    secondName?: string | undefined;
    dateOfBirth?: Date;
    biografy?: string | undefined;
    nationality?: string | undefined;
    books?: BookDTO[] | undefined;

    constructor(data?: IAuthorDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.secondName = _data["secondName"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.biografy = _data["biografy"];
            this.nationality = _data["nationality"];
            if (Array.isArray(_data["books"])) {
                this.books = [] as any;
                for (let item of _data["books"])
                    this.books!.push(BookDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AuthorDTO {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["secondName"] = this.secondName;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["biografy"] = this.biografy;
        data["nationality"] = this.nationality;
        if (Array.isArray(this.books)) {
            data["books"] = [];
            for (let item of this.books)
                data["books"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAuthorDTO {
    id?: number;
    firstName?: string | undefined;
    secondName?: string | undefined;
    dateOfBirth?: Date;
    biografy?: string | undefined;
    nationality?: string | undefined;
    books?: BookDTO[] | undefined;
}

export class AuthorNamesAndIdInfo implements IAuthorNamesAndIdInfo {
    id?: number;
    firstName?: string | undefined;
    secondName?: string | undefined;

    constructor(data?: IAuthorNamesAndIdInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.secondName = _data["secondName"];
        }
    }

    static fromJS(data: any): AuthorNamesAndIdInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorNamesAndIdInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["secondName"] = this.secondName;
        return data;
    }
}

export interface IAuthorNamesAndIdInfo {
    id?: number;
    firstName?: string | undefined;
    secondName?: string | undefined;
}

export class AuthorsForGenreFiltr implements IAuthorsForGenreFiltr {

    constructor(data?: IAuthorsForGenreFiltr) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AuthorsForGenreFiltr {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorsForGenreFiltr();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAuthorsForGenreFiltr {
}

export class Book implements IBook {
    id?: number;
    name?: string | undefined;
    rating?: number;
    price?: number;
    description?: string | undefined;
    bookUrl?: string | undefined;
    genreOfBooks?: GenreOfBook[] | undefined;
    authors?: Author[] | undefined;
    images?: BookImage[] | undefined;
    buyers?: Customer[] | undefined;
    customersWantedToBuy?: Customer[] | undefined;
    fans?: Customer[] | undefined;

    constructor(data?: IBook) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.rating = _data["rating"];
            this.price = _data["price"];
            this.description = _data["description"];
            this.bookUrl = _data["bookUrl"];
            if (Array.isArray(_data["genreOfBooks"])) {
                this.genreOfBooks = [] as any;
                for (let item of _data["genreOfBooks"])
                    this.genreOfBooks!.push(GenreOfBook.fromJS(item));
            }
            if (Array.isArray(_data["authors"])) {
                this.authors = [] as any;
                for (let item of _data["authors"])
                    this.authors!.push(Author.fromJS(item));
            }
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(BookImage.fromJS(item));
            }
            if (Array.isArray(_data["buyers"])) {
                this.buyers = [] as any;
                for (let item of _data["buyers"])
                    this.buyers!.push(Customer.fromJS(item));
            }
            if (Array.isArray(_data["customersWantedToBuy"])) {
                this.customersWantedToBuy = [] as any;
                for (let item of _data["customersWantedToBuy"])
                    this.customersWantedToBuy!.push(Customer.fromJS(item));
            }
            if (Array.isArray(_data["fans"])) {
                this.fans = [] as any;
                for (let item of _data["fans"])
                    this.fans!.push(Customer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Book {
        data = typeof data === 'object' ? data : {};
        let result = new Book();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["rating"] = this.rating;
        data["price"] = this.price;
        data["description"] = this.description;
        data["bookUrl"] = this.bookUrl;
        if (Array.isArray(this.genreOfBooks)) {
            data["genreOfBooks"] = [];
            for (let item of this.genreOfBooks)
                data["genreOfBooks"].push(item.toJSON());
        }
        if (Array.isArray(this.authors)) {
            data["authors"] = [];
            for (let item of this.authors)
                data["authors"].push(item.toJSON());
        }
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        if (Array.isArray(this.buyers)) {
            data["buyers"] = [];
            for (let item of this.buyers)
                data["buyers"].push(item.toJSON());
        }
        if (Array.isArray(this.customersWantedToBuy)) {
            data["customersWantedToBuy"] = [];
            for (let item of this.customersWantedToBuy)
                data["customersWantedToBuy"].push(item.toJSON());
        }
        if (Array.isArray(this.fans)) {
            data["fans"] = [];
            for (let item of this.fans)
                data["fans"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBook {
    id?: number;
    name?: string | undefined;
    rating?: number;
    price?: number;
    description?: string | undefined;
    bookUrl?: string | undefined;
    genreOfBooks?: GenreOfBook[] | undefined;
    authors?: Author[] | undefined;
    images?: BookImage[] | undefined;
    buyers?: Customer[] | undefined;
    customersWantedToBuy?: Customer[] | undefined;
    fans?: Customer[] | undefined;
}

export class BookDTO implements IBookDTO {
    id?: number;
    name?: string | undefined;
    rating?: number;
    price?: number;
    description?: string | undefined;
    genresOfBook?: GenreOfBook[] | undefined;
    authors?: Author[] | undefined;
    images?: BookImage[] | undefined;
    buyers?: Customer[] | undefined;
    customersWantedToBuy?: Customer[] | undefined;
    fans?: Customer[] | undefined;

    constructor(data?: IBookDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.rating = _data["rating"];
            this.price = _data["price"];
            this.description = _data["description"];
            if (Array.isArray(_data["genresOfBook"])) {
                this.genresOfBook = [] as any;
                for (let item of _data["genresOfBook"])
                    this.genresOfBook!.push(GenreOfBook.fromJS(item));
            }
            if (Array.isArray(_data["authors"])) {
                this.authors = [] as any;
                for (let item of _data["authors"])
                    this.authors!.push(Author.fromJS(item));
            }
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(BookImage.fromJS(item));
            }
            if (Array.isArray(_data["buyers"])) {
                this.buyers = [] as any;
                for (let item of _data["buyers"])
                    this.buyers!.push(Customer.fromJS(item));
            }
            if (Array.isArray(_data["customersWantedToBuy"])) {
                this.customersWantedToBuy = [] as any;
                for (let item of _data["customersWantedToBuy"])
                    this.customersWantedToBuy!.push(Customer.fromJS(item));
            }
            if (Array.isArray(_data["fans"])) {
                this.fans = [] as any;
                for (let item of _data["fans"])
                    this.fans!.push(Customer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BookDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BookDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["rating"] = this.rating;
        data["price"] = this.price;
        data["description"] = this.description;
        if (Array.isArray(this.genresOfBook)) {
            data["genresOfBook"] = [];
            for (let item of this.genresOfBook)
                data["genresOfBook"].push(item.toJSON());
        }
        if (Array.isArray(this.authors)) {
            data["authors"] = [];
            for (let item of this.authors)
                data["authors"].push(item.toJSON());
        }
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        if (Array.isArray(this.buyers)) {
            data["buyers"] = [];
            for (let item of this.buyers)
                data["buyers"].push(item.toJSON());
        }
        if (Array.isArray(this.customersWantedToBuy)) {
            data["customersWantedToBuy"] = [];
            for (let item of this.customersWantedToBuy)
                data["customersWantedToBuy"].push(item.toJSON());
        }
        if (Array.isArray(this.fans)) {
            data["fans"] = [];
            for (let item of this.fans)
                data["fans"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBookDTO {
    id?: number;
    name?: string | undefined;
    rating?: number;
    price?: number;
    description?: string | undefined;
    genresOfBook?: GenreOfBook[] | undefined;
    authors?: Author[] | undefined;
    images?: BookImage[] | undefined;
    buyers?: Customer[] | undefined;
    customersWantedToBuy?: Customer[] | undefined;
    fans?: Customer[] | undefined;
}

export class BookImage implements IBookImage {
    id?: number;
    imageUrl?: string | undefined;
    book?: Book;

    constructor(data?: IBookImage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.imageUrl = _data["imageUrl"];
            this.book = _data["book"] ? Book.fromJS(_data["book"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BookImage {
        data = typeof data === 'object' ? data : {};
        let result = new BookImage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["imageUrl"] = this.imageUrl;
        data["book"] = this.book ? this.book.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBookImage {
    id?: number;
    imageUrl?: string | undefined;
    book?: Book;
}

export class BookImageDTO implements IBookImageDTO {
    id?: number;
    image?: string | undefined;

    constructor(data?: IBookImageDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.image = _data["image"];
        }
    }

    static fromJS(data: any): BookImageDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BookImageDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["image"] = this.image;
        return data;
    }
}

export interface IBookImageDTO {
    id?: number;
    image?: string | undefined;
}

export class BooksAfterFilterModel implements IBooksAfterFilterModel {
    name?: string | undefined;
    rating?: number;
    price?: number;
    description?: string | undefined;
    bookUrl?: string | undefined;
    genreOfBooks?: GenreOfBook[] | undefined;
    authors?: Author[] | undefined;
    images?: BookImage[] | undefined;

    constructor(data?: IBooksAfterFilterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.rating = _data["rating"];
            this.price = _data["price"];
            this.description = _data["description"];
            this.bookUrl = _data["bookUrl"];
            if (Array.isArray(_data["genreOfBooks"])) {
                this.genreOfBooks = [] as any;
                for (let item of _data["genreOfBooks"])
                    this.genreOfBooks!.push(GenreOfBook.fromJS(item));
            }
            if (Array.isArray(_data["authors"])) {
                this.authors = [] as any;
                for (let item of _data["authors"])
                    this.authors!.push(Author.fromJS(item));
            }
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(BookImage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BooksAfterFilterModel {
        data = typeof data === 'object' ? data : {};
        let result = new BooksAfterFilterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["rating"] = this.rating;
        data["price"] = this.price;
        data["description"] = this.description;
        data["bookUrl"] = this.bookUrl;
        if (Array.isArray(this.genreOfBooks)) {
            data["genreOfBooks"] = [];
            for (let item of this.genreOfBooks)
                data["genreOfBooks"].push(item.toJSON());
        }
        if (Array.isArray(this.authors)) {
            data["authors"] = [];
            for (let item of this.authors)
                data["authors"].push(item.toJSON());
        }
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBooksAfterFilterModel {
    name?: string | undefined;
    rating?: number;
    price?: number;
    description?: string | undefined;
    bookUrl?: string | undefined;
    genreOfBooks?: GenreOfBook[] | undefined;
    authors?: Author[] | undefined;
    images?: BookImage[] | undefined;
}

export class BooksByGenreFiltr implements IBooksByGenreFiltr {
    id?: number;
    name?: string | undefined;
    rating?: number;
    price?: number;
    description?: string | undefined;
    genresOfBook?: AuthorsForGenreFiltr[] | undefined;
    images?: BookImageDTO[] | undefined;

    constructor(data?: IBooksByGenreFiltr) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.rating = _data["rating"];
            this.price = _data["price"];
            this.description = _data["description"];
            if (Array.isArray(_data["genresOfBook"])) {
                this.genresOfBook = [] as any;
                for (let item of _data["genresOfBook"])
                    this.genresOfBook!.push(AuthorsForGenreFiltr.fromJS(item));
            }
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(BookImageDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BooksByGenreFiltr {
        data = typeof data === 'object' ? data : {};
        let result = new BooksByGenreFiltr();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["rating"] = this.rating;
        data["price"] = this.price;
        data["description"] = this.description;
        if (Array.isArray(this.genresOfBook)) {
            data["genresOfBook"] = [];
            for (let item of this.genresOfBook)
                data["genresOfBook"].push(item.toJSON());
        }
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBooksByGenreFiltr {
    id?: number;
    name?: string | undefined;
    rating?: number;
    price?: number;
    description?: string | undefined;
    genresOfBook?: AuthorsForGenreFiltr[] | undefined;
    images?: BookImageDTO[] | undefined;
}

export class BooksForAuthorFilter implements IBooksForAuthorFilter {
    id?: number;
    name?: string | undefined;
    rating?: number;
    price?: number;
    description?: string | undefined;
    genresOfBook?: GenreOfBookForAuthorFiltr[] | undefined;
    images?: BookImageDTO[] | undefined;

    constructor(data?: IBooksForAuthorFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.rating = _data["rating"];
            this.price = _data["price"];
            this.description = _data["description"];
            if (Array.isArray(_data["genresOfBook"])) {
                this.genresOfBook = [] as any;
                for (let item of _data["genresOfBook"])
                    this.genresOfBook!.push(GenreOfBookForAuthorFiltr.fromJS(item));
            }
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(BookImageDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BooksForAuthorFilter {
        data = typeof data === 'object' ? data : {};
        let result = new BooksForAuthorFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["rating"] = this.rating;
        data["price"] = this.price;
        data["description"] = this.description;
        if (Array.isArray(this.genresOfBook)) {
            data["genresOfBook"] = [];
            for (let item of this.genresOfBook)
                data["genresOfBook"].push(item.toJSON());
        }
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBooksForAuthorFilter {
    id?: number;
    name?: string | undefined;
    rating?: number;
    price?: number;
    description?: string | undefined;
    genresOfBook?: GenreOfBookForAuthorFiltr[] | undefined;
    images?: BookImageDTO[] | undefined;
}

export class CreateNewAuthorModel implements ICreateNewAuthorModel {
    firstName!: string;
    secondName!: string;
    dateOfBirth?: Date | undefined;
    biografy!: string;
    nationality!: string;

    constructor(data?: ICreateNewAuthorModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.secondName = _data["secondName"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.biografy = _data["biografy"];
            this.nationality = _data["nationality"];
        }
    }

    static fromJS(data: any): CreateNewAuthorModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNewAuthorModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["secondName"] = this.secondName;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["biografy"] = this.biografy;
        data["nationality"] = this.nationality;
        return data;
    }
}

export interface ICreateNewAuthorModel {
    firstName: string;
    secondName: string;
    dateOfBirth?: Date | undefined;
    biografy: string;
    nationality: string;
}

export class CreateNewBookModel implements ICreateNewBookModel {
    name?: string | undefined;
    price?: number;
    description?: string | undefined;
    imageFiles?: string[] | undefined;
    book?: string | undefined;
    genresOfBookId?: number[] | undefined;
    authorsId?: number[] | undefined;

    constructor(data?: ICreateNewBookModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.price = _data["price"];
            this.description = _data["description"];
            if (Array.isArray(_data["imageFiles"])) {
                this.imageFiles = [] as any;
                for (let item of _data["imageFiles"])
                    this.imageFiles!.push(item);
            }
            this.book = _data["book"];
            if (Array.isArray(_data["genresOfBookId"])) {
                this.genresOfBookId = [] as any;
                for (let item of _data["genresOfBookId"])
                    this.genresOfBookId!.push(item);
            }
            if (Array.isArray(_data["authorsId"])) {
                this.authorsId = [] as any;
                for (let item of _data["authorsId"])
                    this.authorsId!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateNewBookModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNewBookModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["price"] = this.price;
        data["description"] = this.description;
        if (Array.isArray(this.imageFiles)) {
            data["imageFiles"] = [];
            for (let item of this.imageFiles)
                data["imageFiles"].push(item);
        }
        data["book"] = this.book;
        if (Array.isArray(this.genresOfBookId)) {
            data["genresOfBookId"] = [];
            for (let item of this.genresOfBookId)
                data["genresOfBookId"].push(item);
        }
        if (Array.isArray(this.authorsId)) {
            data["authorsId"] = [];
            for (let item of this.authorsId)
                data["authorsId"].push(item);
        }
        return data;
    }
}

export interface ICreateNewBookModel {
    name?: string | undefined;
    price?: number;
    description?: string | undefined;
    imageFiles?: string[] | undefined;
    book?: string | undefined;
    genresOfBookId?: number[] | undefined;
    authorsId?: number[] | undefined;
}

export class CreateNewGenreOfBookModel implements ICreateNewGenreOfBookModel {
    genre?: string | undefined;
    description?: string | undefined;

    constructor(data?: ICreateNewGenreOfBookModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.genre = _data["genre"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateNewGenreOfBookModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNewGenreOfBookModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["genre"] = this.genre;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateNewGenreOfBookModel {
    genre?: string | undefined;
    description?: string | undefined;
}

export class Customer implements ICustomer {
    id?: number;
    bonuses?: number;
    broughtBooks?: Book[] | undefined;
    booksReadyToBuy?: Book[] | undefined;
    favoriteBooks?: Book[] | undefined;
    favoriteTypes?: GenreOfBook[] | undefined;

    constructor(data?: ICustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.bonuses = _data["bonuses"];
            if (Array.isArray(_data["broughtBooks"])) {
                this.broughtBooks = [] as any;
                for (let item of _data["broughtBooks"])
                    this.broughtBooks!.push(Book.fromJS(item));
            }
            if (Array.isArray(_data["booksReadyToBuy"])) {
                this.booksReadyToBuy = [] as any;
                for (let item of _data["booksReadyToBuy"])
                    this.booksReadyToBuy!.push(Book.fromJS(item));
            }
            if (Array.isArray(_data["favoriteBooks"])) {
                this.favoriteBooks = [] as any;
                for (let item of _data["favoriteBooks"])
                    this.favoriteBooks!.push(Book.fromJS(item));
            }
            if (Array.isArray(_data["favoriteTypes"])) {
                this.favoriteTypes = [] as any;
                for (let item of _data["favoriteTypes"])
                    this.favoriteTypes!.push(GenreOfBook.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Customer {
        data = typeof data === 'object' ? data : {};
        let result = new Customer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bonuses"] = this.bonuses;
        if (Array.isArray(this.broughtBooks)) {
            data["broughtBooks"] = [];
            for (let item of this.broughtBooks)
                data["broughtBooks"].push(item.toJSON());
        }
        if (Array.isArray(this.booksReadyToBuy)) {
            data["booksReadyToBuy"] = [];
            for (let item of this.booksReadyToBuy)
                data["booksReadyToBuy"].push(item.toJSON());
        }
        if (Array.isArray(this.favoriteBooks)) {
            data["favoriteBooks"] = [];
            for (let item of this.favoriteBooks)
                data["favoriteBooks"].push(item.toJSON());
        }
        if (Array.isArray(this.favoriteTypes)) {
            data["favoriteTypes"] = [];
            for (let item of this.favoriteTypes)
                data["favoriteTypes"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICustomer {
    id?: number;
    bonuses?: number;
    broughtBooks?: Book[] | undefined;
    booksReadyToBuy?: Book[] | undefined;
    favoriteBooks?: Book[] | undefined;
    favoriteTypes?: GenreOfBook[] | undefined;
}

export class FilterForBookModel implements IFilterForBookModel {
    authorsId?: number[] | undefined;
    genresId?: number[] | undefined;
    cost?: number[] | undefined;
    rating?: number | undefined;

    constructor(data?: IFilterForBookModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["authorsId"])) {
                this.authorsId = [] as any;
                for (let item of _data["authorsId"])
                    this.authorsId!.push(item);
            }
            if (Array.isArray(_data["genresId"])) {
                this.genresId = [] as any;
                for (let item of _data["genresId"])
                    this.genresId!.push(item);
            }
            if (Array.isArray(_data["cost"])) {
                this.cost = [] as any;
                for (let item of _data["cost"])
                    this.cost!.push(item);
            }
            this.rating = _data["rating"];
        }
    }

    static fromJS(data: any): FilterForBookModel {
        data = typeof data === 'object' ? data : {};
        let result = new FilterForBookModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.authorsId)) {
            data["authorsId"] = [];
            for (let item of this.authorsId)
                data["authorsId"].push(item);
        }
        if (Array.isArray(this.genresId)) {
            data["genresId"] = [];
            for (let item of this.genresId)
                data["genresId"].push(item);
        }
        if (Array.isArray(this.cost)) {
            data["cost"] = [];
            for (let item of this.cost)
                data["cost"].push(item);
        }
        data["rating"] = this.rating;
        return data;
    }
}

export interface IFilterForBookModel {
    authorsId?: number[] | undefined;
    genresId?: number[] | undefined;
    cost?: number[] | undefined;
    rating?: number | undefined;
}

export class GenreOfBook implements IGenreOfBook {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    books?: Book[] | undefined;
    fansOfGenres?: Customer[] | undefined;

    constructor(data?: IGenreOfBook) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            if (Array.isArray(_data["books"])) {
                this.books = [] as any;
                for (let item of _data["books"])
                    this.books!.push(Book.fromJS(item));
            }
            if (Array.isArray(_data["fansOfGenres"])) {
                this.fansOfGenres = [] as any;
                for (let item of _data["fansOfGenres"])
                    this.fansOfGenres!.push(Customer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GenreOfBook {
        data = typeof data === 'object' ? data : {};
        let result = new GenreOfBook();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        if (Array.isArray(this.books)) {
            data["books"] = [];
            for (let item of this.books)
                data["books"].push(item.toJSON());
        }
        if (Array.isArray(this.fansOfGenres)) {
            data["fansOfGenres"] = [];
            for (let item of this.fansOfGenres)
                data["fansOfGenres"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGenreOfBook {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    books?: Book[] | undefined;
    fansOfGenres?: Customer[] | undefined;
}

export class GenreOfBookDTO implements IGenreOfBookDTO {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IGenreOfBookDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): GenreOfBookDTO {
        data = typeof data === 'object' ? data : {};
        let result = new GenreOfBookDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IGenreOfBookDTO {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
}

export class GenreOfBookForAuthorFiltr implements IGenreOfBookForAuthorFiltr {
    genre?: string | undefined;
    id?: number;

    constructor(data?: IGenreOfBookForAuthorFiltr) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.genre = _data["genre"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): GenreOfBookForAuthorFiltr {
        data = typeof data === 'object' ? data : {};
        let result = new GenreOfBookForAuthorFiltr();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["genre"] = this.genre;
        data["id"] = this.id;
        return data;
    }
}

export interface IGenreOfBookForAuthorFiltr {
    genre?: string | undefined;
    id?: number;
}

export class GenreOfBookNamesAndIdInfo implements IGenreOfBookNamesAndIdInfo {
    id?: number;
    name?: string | undefined;

    constructor(data?: IGenreOfBookNamesAndIdInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GenreOfBookNamesAndIdInfo {
        data = typeof data === 'object' ? data : {};
        let result = new GenreOfBookNamesAndIdInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IGenreOfBookNamesAndIdInfo {
    id?: number;
    name?: string | undefined;
}

export class GetAllGenreModel implements IGetAllGenreModel {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IGetAllGenreModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): GetAllGenreModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllGenreModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IGetAllGenreModel {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
}

export class GetMaxAndMinPriceInfo implements IGetMaxAndMinPriceInfo {
    minPrice?: number;
    maxPrice?: number;

    constructor(data?: IGetMaxAndMinPriceInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.minPrice = _data["minPrice"];
            this.maxPrice = _data["maxPrice"];
        }
    }

    static fromJS(data: any): GetMaxAndMinPriceInfo {
        data = typeof data === 'object' ? data : {};
        let result = new GetMaxAndMinPriceInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minPrice"] = this.minPrice;
        data["maxPrice"] = this.maxPrice;
        return data;
    }
}

export interface IGetMaxAndMinPriceInfo {
    minPrice?: number;
    maxPrice?: number;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}